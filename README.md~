Pokey
=====
An easy to use HTTP test client

What is Pokey?
============================
Pokey is an HTTP Client of sorts which allows you to specify HTTP endpoints, request headers, 
request body, and make assertions about the response.  It can be used for regression testing, 
unit testing, TDD, stress testing, health checks, or even as a friendly alternative to curl.

Prerequisites
============================
* Python 2.6.6 or greater.
* Requests Python module (available <a href="foo">here</a>, or just run the setup.sh script included within this project.

How to Run
============================
* Run pokey: python pokey.py (use -h for help)
** Use --path option to specify test folder (otherwise "tests" is assumed)

How to Setup Tests
============================
First let's look at a tree view of this project:

├── pokey.py
├── README.md
├── setup.sh
└── tests
    └── examples
        ├── GET
        │   ├── custom_headers
        │   │   ├── about
        │   │   ├── headers
        │   │   └── url
        │   ├── rest_call_with_assertions
        │   │   ├── about
        │   │   ├── expected_response_body
        │   │   ├── expected_response_message
        │   │   └── url
        │   └── simplest
        │       ├── about
        │       └── url
        └── POST
            └── custom_headers_with_payload
                ├── about
                ├── headers
                ├── payload
                └── url

Looking at this structure should give you some insight into the way pokey works.  Instead of using configuration files, pokey lets the file structure to most of the talking.  In this example, a simple "tree" command in the terminal tells us a lot aboutour test suite:

* Looks like we have examples that are organized into GET and POST
* There are three GET examples
** The "simplest" test is the simplest possible example of a pokey test.  It contains only an url.  Later we'll see that since there is no payload, a "GET" is implied, and since there is no assertion made about the response, a "200 OK" is expected.
** The "custom_headers" test uses custom request headers.  So it's like simplest, but here we provide a basic authentication header among others.
** The "rest_call_with_assertions" is an example negative-case test, where we expect something other than a "200 OK" returned from the server.
* There is one POST example
** In this example, the existence of a payload file tells pokey we want to perform a POST.  The payload file can be of any content type.

Other notes:

* The about files are just there for humans, and provide some notes about the test.  It's just a suggested convention.
* Some file managers, including the native file manager in Windows 7, will automatically peek at the contents of a text file and display them in a preview pane.  This means you can completely explore your pokey test suite without opening a text editor.


Support
============================
* Report issues at https://github.com/robertjchristian/pokey/issues
* Wiki at https://github.com/robertjchristian/pokey/wiki
* Also see http://robertjchristian.github.com/pokey

